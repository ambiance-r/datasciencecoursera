logret <- diff(log(gold))[-1]
library(rugarch)
uspec <- ugarchspec( variance.model = list(model = "sGARCH",garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
fit.garch <- ugarchfit(spec = uspec, data = logret[,1])
fit.garch@fit$coef
set.seed(123789) #set seed value
boot.garch <- ugarchboot(fit.garch,
method=c("Partial","Full")[1], # ignore parameter uncertainty
sampling="raw", # draw from standardized residuals
n.ahead=1, # 1-day ahead
n.bootpred=100000, # number of simulated outcomes
solver="solnp")
rvec <- boot.garch@fseries
VaR <- quantile(rvec,0.05)
ES <- mean(rvec[rvec<VaR])
ES
library(quantmod)
yen <-getSymbols("DEXJPUS",src="FRED",auto.assign=FALSE)
yen <- na.omit(yen)
yen2 <- 1/yen
yen2 <- yen2["1979-12-31/2017-12-31"]
names(yen2) <- "TR"
logret <- diff(log(yen2))
logret <- diff(log(yen2))[-1]
acf(logret)
acf(abs(logret))
library(rugarch)
uspec <- ugarchspec( variance.model = list(model = "sGARCH",garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
fit.garch <- ugarchfit(spec = uspec, data = logret[,1])
fit.garch@fit$coef
set.seed(123789) #set seed value
boot.garch <- ugarchboot(fit.garch,
method=c("Partial","Full")[1], # ignore parameter uncertainty
sampling="raw", # draw from standardized residuals
n.ahead=1, # 1-day ahead
n.bootpred=100000, # number of simulated outcomes
solver="solnp")
rvec <- boot.garch@fseries
VaR <- quantile(rvec,0.05)
ES <- mean(rvec[rvec<VaR])
VaR
ES
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(ggplot2)
View(concrete)
View(mixtures)
View(concrete)
View(mixtures)
str(mixtures)
library(ggplot2)
library(Hmisc)
install.packages("Hmisc")
library(ggplot2)
library(Hmisc)
cutcement <- cut2(mixtures$Cement, g=3)
cutblast <- cut2(mixtures$BlastFurnaceSlag, g=3)
cutflyash <- cut2(mixtures$FlyAsh, g=3)
cutwater <- cut2(mixtures$Water, g=3)
cutplasticizer <- cut2(mixtures$Superplasticizer, g=3)
cutcoarse <- cut2(mixtures$CoarseAggregate, g=3)
cutfine <- cut2(mixtures$FineAggregate, g=3)
cutage <- cut2(mixtures$Age, g=3)
qplot(mixtures$CompressiveStrength, colour = Cement, data = mixtures)
qplot(mixtures$CompressiveStrength, colour = BlastFurnaceSlag, data = mixtures)
qplot(mixtures$CompressiveStrength, colour = Cement, data = training)
View(training)
cutcement <- cut2(training$Cement, g=3)
qplot(training$CompressiveStrength, colour = Cement, data = training)
qplot(training$CompressiveStrength, inTrain, colour = Cement, data = training)
qplot(inTrain, training$CompressiveStrength, colour = Cement, data = training)
inTrain
plot(training$CompressiveStrength, colour = BlastFurnaceSlag, data = training)
View(training)
qplot(inTrain, training$CompressiveStrength, colour = Cement, data = training)
qplot(inTrain, training$CompressiveStrength, colour = BlastFurnaceSlag, data = training)
qplot(inTrain, training$CompressiveStrength, colour = Cement, data = training)
qplot(inTrain, training$CompressiveStrength, colour = BlastFurnaceSlag, data = training)
qplot(inTrain, training$CompressiveStrength, colour = FlyAsh, data = training)
qplot(inTrain, training$CompressiveStrength, colour = Water, data = training)
qplot(inTrain, training$CompressiveStrength, colour = Superplasticizer, data = training)
qplot(inTrain, training$CompressiveStrength, colour = CoarseAggregate, data = training)
qplot(inTrain, training$CompressiveStrength, colour = FineAggregate, data = training)
qplot(inTrain, training$CompressiveStrength, colour = Age, data = training)
qplot(inTrain, training$CompressiveStrength, colour = FineAggregate, data = training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
range(training$Superplasticizer)
log(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(adData)
View(predictors)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
View(predictors)
adData = data.frame(diagnosis,predictors)
View(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(predictors)
predictors_IL <- predictors[,which(names(predictors)==IL)]
predictors_IL <- predictors[,which(names(predictors)=="IL")]
predictors_IL
predictors_IL <- predictors[ ,grepl("IL", names(predictors))]
View(predictors_IL)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
View(predictors_IL)
View(predictors_IL)
preProc <- preProcess(log10(predictors_IL+1), method = "pca")#, pcaComp = 2)
range(IL_1alpha)
range(predictors_IL$IL_1alpha)
range(predictors_IL$IL_3)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
preProc <- preProcess(log10(predictors_IL+1), method = "pca", pcaComp = 2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
predictors_IL <- predictors[ ,grepl("diagnosis", names(predictors)) & grepl("^IL", names(predictors))]
predictors_IL
training <- cbind(diagnosis, predictors_IL)
View(training)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
training <- cbind(diagnosis, predictors_IL)
View(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
adData = data.frame(diagnosis,predictors_IL)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model, testing)
qplot(diagnosis, pred1, data = testing)
ppred1
pred1
preProc <- preProcess(log10(predictors_IL+1), method = "pca", pcaComp = 2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
preProc <- preProcess(predictors_IL, method = "pca", pcaComp = 2)
View(preProc)
preProc <- preProcess(predictors_IL, method = "pca")#, pcaComp = 2)
View(preProc)
preProc <- preProcess(predictors_IL, method = "pca", thresh = 0.8)#, pcaComp = 2)
View(preProc)
preProc$rotation
model <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model, testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
adData = data.frame(diagnosis,predictors_IL)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model, testing)
preProc <- preProcess(predictors_IL, method = "pca", thresh = 0.8)
pred2 <- predict(preProc, predictors_IL)
pred1
pred2
pred1
diagnosis
testing$diagnosis
sum(pred1 == testing$diagnosis)
sum(pred2 == testing$diagnosis)
accuracy2 <- sum(pred2 == testing$diagnosis)
summary(model)
View(training)
pred1
table(pred1, testing$diagnosis)
pred2
preProc
preProc
pred2
View(pred2)
model1 <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model1, testing)
table(pred1, testing$diagnosis)
View(pred2)
preProc <- preProcess(predictors_IL, method = "pca", thresh = 0.8)
pred2pc <- predict(preProc, predictors_IL)
pred2pcdata <- cbind(diagnosis, pred2pc)
View(pred2pcdata)
View(predictors_IL)
model2 <- train(diagnosis ~ . , data = pred2pcdata, method = "glm")
summary(model2)
pred2 <- predict(model2, testing)
View(pred2pc)
View(pred2pcdata)
View(predictors_IL)
View(testing)
preProc <- preProcess(predictors_IL, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, predictors_IL)
trainpcdata <- cbind(diagnosis, trainpc)
View(trainpcdata)
View(testing)
model1
preProc <- preProcess(predictors_IL, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, predictors_IL)
trainpcdata <- cbind(diagnosis, trainpc)
model2 <- train(diagnosis ~ . , data = trainpcdata, method = "glm")
pred2 <- predict(model2, testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
adData = data.frame(diagnosis,predictors_IL)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model1 <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model1, testing)
View(training)
View(testing)
preProc <- preProcess(predictors_IL, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, predictors_IL)
trainpcdata <- cbind(diagnosis, trainpc)
View(trainpcdata)
model2 <- train(diagnosis ~ . , data = trainpcdata, method = "glm")
summary(model2)
trainingpc <- training[,-diagnosis]
trainingpc <- training[,-training$diagnosis]
trainingpc <- training[,-1]
View(trainpc)
View(trainingpc)
testingpc <- testing[,-1]
View(testingpc)
View(testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
adData = data.frame(diagnosis,predictors_IL)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model1 <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model1, testing)
table(pred1, testing$diagnosis)
trainingpc <- training[,-1]
testingpc <- testing[,-1]
preProc <- preProcess(trainingpc, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, trainingpc)
trainpcdata <- cbind(diagnosis, trainpc)
model2 <- train(diagnosis ~ . , data = trainpcdata, method = "glm")
trainpcdata <- cbind(diagnosis, trainpc)
trainpcdata <- cbind(training$diagnosis, trainpc)
model2 <- train(diagnosis ~ . , data = trainpcdata, method = "glm")
model2 <- train(training$diagnosis ~ . , data = trainpcdata, method = "glm")
trainingdiagnosis <- training$diagnosis
testingdiagnosis <- testing$diagnosis
View(training)
View(testing)
trainingdiagnosis <- training[,1]
testingdiagnosis <- testing[,1]
trainpcdata <- cbind(trainingdiagnosis, trainpc)
testpcdata <- cbind(testingdiagnosis, testpc)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
adData = data.frame(diagnosis,predictors_IL)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model1 <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model1, testing)
table(pred1, testing$diagnosis)
trainingpc <- training[,-1]
testingpc <- testing[,-1]
trainingdiagnosis <- training[,1]
testingdiagnosis <- testing[,1]
preProc <- preProcess(trainingpc, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, trainingpc)
trainpcdata <- cbind(trainingdiagnosis, trainpc)
model2 <- train(diagnosis ~ . , data = trainpcdata, method = "glm")
preProc <- preProcess(trainingpc, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, trainingpc)
trainpcdata <- cbind(trainingdiagnosis, trainpc)
View(trainpcdata)
model2 <- train(trainingdiagnosis ~ . , data = trainpcdata, method = "glm")
testpc <- predict(preProc, testingpc)
testpcdata <- cbind(testingdiagnosis, testpc)
pred2 <- predict(model2, testpcdata)
table(pred2, testing$diagnosis)
table(pred1, testing$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
adData = data.frame(diagnosis,predictors_IL)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model1 <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model1, testing)
table(pred1, testing$diagnosis)
trainingpc <- training[,-1]
testingpc <- testing[,-1]
trainingdiagnosis <- training[,1]
testingdiagnosis <- testing[,1]
preProc <- preProcess(trainingpc, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, trainingpc)
trainpcdata <- cbind(trainingdiagnosis, trainpc)
model2 <- train(trainingdiagnosis ~ . , data = trainpcdata, method = "glm")
testpc <- predict(preProc, testingpc)
testpcdata <- cbind(testingdiagnosis, testpc)
pred2 <- predict(model2, testpcdata)
table(pred2, testing$diagnosis)
confusionMatrix(testingdiagnosis,pred2)
confusionMatrix(training$diagnosis,pred1)
confusionMatrix(testing$diagnosis,pred1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
adData = data.frame(diagnosis,predictors_IL)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model1 <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model1, testing)
confusionMatrix(testing$diagnosis,pred1)
trainingpc <- training[,-1]
testingpc <- testing[,-1]
trainingdiagnosis <- training[,1]
testingdiagnosis <- testing[,1]
preProc <- preProcess(trainingpc, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, trainingpc)
trainpcdata <- cbind(trainingdiagnosis, trainpc)
model2 <- train(trainingdiagnosis ~ . , data = trainpcdata, method = "glm")
summary(model2)
model2 <- train(trainingdiagnosis ~ . , data = trainpc, method = "glm")
model2 <- train(training$diagnosis ~ . , data = trainpc, method = "glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
predictors_IL <- predictors[ ,grepl("^IL", names(predictors))]
adData = data.frame(diagnosis,predictors_IL)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model1 <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model1, testing)
confusionMatrix(testing$diagnosis,pred1)
trainingpc <- training[,-1]
testingpc <- testing[,-1]
trainingdiagnosis <- training[,1]
testingdiagnosis <- testing[,1]
preProc <- preProcess(trainingpc, method = "pca", thresh = 0.8)
trainpc <- predict(preProc, trainingpc)
trainpcdata <- cbind(trainingdiagnosis, trainpc)
model2 <- train(trainingdiagnosis ~ . , data = trainpcdata, method = "glm")
testpc <- predict(preProc, testingpc)
testpcdata <- cbind(testingdiagnosis, testpc)
pred2 <- predict(model2, testpc)
confusionMatrix(testingdiagnosis,pred2)
confusionMatrix(testingdiagnosis,pred2data)
pred2 <- predict(model2, testpcdata)
confusionMatrix(testingdiagnosis,pred2)
confusionMatrix(testingdiagnosis,pred2)
model1 <- train(diagnosis ~ . , data = training, method = "glm")
pred1 <- predict(model1, testing)
confusionMatrix(testing$diagnosis,pred1)
library(pgmm)
data(olive)
olive = olive[,-1]
library(caret)
inTrain <- createDataPartition(y=olive$Area, p=0.75, list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
library(tree)
mod <- tree(as.factor(Area) ~ . , data=training)
newdata = as.data.frame(t(colMeans(olive)))
pre <- predict(mod, newdata)
pre
newdata
View(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
library(caret)
inTrain <- createDataPartition(y=olive$Area, p=0.75, list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
library(tree)
#mod <- tree(as.factor(Area) ~ . , data=training)
mod <- tree(Area ~ . , data=training)
newdata = as.data.frame(t(colMeans(olive)))
pre <- predict(mod, newdata)
pre
newdata
str(olive)
newdata
pre
View(olive)
mod <- tree(Area ~ . , data=training)
newdata = as.data.frame(t(colMeans(olive)))
pre <- predict(mod, newdata)
pre
mod <- tree(as.factor(Area) ~ . , data=training)
newdata = as.data.frame(t(colMeans(olive)))
pre <- predict(mod, newdata)
pre
newdata
mod <- tree(Area ~ . , data=training)
newdata = as.data.frame(t(colMeans(olive)))
pre <- predict(mod, newdata)
pre
RNGversion("3.0.0")
library(pgmm)
data(olive)
olive = olive[,-1]
library(caret)
inTrain <- createDataPartition(y=olive$Area, p=0.75, list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
library(tree)
#mod <- tree(as.factor(Area) ~ . , data=training)
mod <- tree(Area ~ . , data=training)
newdata = as.data.frame(t(colMeans(olive)))
pre <- predict(mod, newdata)
pre
install.packages("shiny")
library(shiny)
runApp('miApp')
runApp()
runApp('miApp')
?builder
runApp('miApp')
runApp('miApp')
runApp('miApp')
runApp('miApp')
runApp('miApp')
runApp('miApp')
runApp('miApp')
runApp('miApp')
getwd()
getwd()
runApp('miApp')
runApp('miApp')
runApp('miApp')
install.packages("miniUI")
install.packages("plotly")
install.packages("leaflet")
library(leaflet)
setwd("C:/Users/user/datasciencecoursera/DevelopingDataProducts/week2assignment")
